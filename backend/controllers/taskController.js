const pool = require("../config/db");

/**
 * @desc    Get tasks with search and filtering
 * @route   GET /api/tasks
 * @access  Private
 * @description Fetches tasks for the logged-in user. It supports filtering by
 */
const getTasks = async (req, res) => {
  try {
    const { search, status, priority } = req.query;
    let query = `
      SELECT t.*, assigner.name as assigner_name, assignee.name as assignee_name
      FROM tasks t
      JOIN users assigner ON t.assigner_id = assigner.id
      JOIN users assignee ON t.assignee_id = assignee.id
      WHERE (t.assigner_id = ? OR t.assignee_id = ?)
    `;
    const params = [req.user.id, req.user.id];

    if (search) {
      // If search term starts with '#', search by ID.
      if (search.startsWith("#")) {
        const ticketId = parseInt(search.substring(1), 10);
        // Ensure the parsed ID is a valid number before adding to query.
        if (!isNaN(ticketId)) {
          query += " AND t.id = ?";
          params.push(ticketId);
        }
      } else {
        // Otherwise, perform a text search on the title.
        query += " AND t.title LIKE ?";
        params.push(`%${search}%`);
      }
    }

    if (status) {
      query += " AND t.status = ?";
      params.push(status);
    }
    if (priority) {
      query += " AND t.priority = ?";
      params.push(priority);
    }

    query += " ORDER BY t.created_at DESC";

    const [tasks] = await pool.query(query, params);
    res.json(tasks);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};

/**
 * @desc    Create a task
 * @route   POST /api/tasks
 * @access  Private
 * @description Creates a new task. The ticket ID is auto-generated by the database.
 */
const createTask = async (req, res) => {
  const { title, description, priority, dueDate, assignee_id } = req.body;
  const assigner_id = req.user.id;

  try {
    const [result] = await pool.query(
      "INSERT INTO tasks (title, description, priority, due_date, assigner_id, assignee_id) VALUES (?, ?, ?, ?, ?, ?)",
      [title, description, priority, dueDate, assigner_id, assignee_id]
    );
    const [task] = await pool.query("SELECT * FROM tasks WHERE id = ?", [
      result.insertId,
    ]);
    res.status(201).json(task[0]);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};

/**
 * @desc    Update task status
 * @route   PATCH /api/tasks/:id/status
 * @access  Private
 * @description Updates the status of a specific task. Only the assignee of the
 * task is authorized to change its status.
 */
const updateTaskStatus = async (req, res) => {
  const { status } = req.body;
  try {
    const [task] = await pool.query("SELECT * FROM tasks WHERE id = ?", [
      req.params.id,
    ]);

    if (task.length === 0) {
      return res.status(404).json({ message: "Task not found" });
    }

    // Check if the logged-in user is the task's assignee
    if (task[0].assignee_id !== req.user.id) {
      return res
        .status(403)
        .json({ message: "User not authorized to update this task" });
    }

    await pool.query("UPDATE tasks SET status = ? WHERE id = ?", [
      status,
      req.params.id,
    ]);
    res.json({ message: "Task status updated successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};
/**
 * @desc    Update a task's details
 * @route   PUT /api/tasks/:id
 * @access  Private
 * @description Updates the details of a task. Only the user who assigned the
 * task is authorized to edit it.
 */
const updateTask = async (req, res) => {
  try {
    const { title, description, priority, dueDate, assignee_id } = req.body;
    const taskId = req.params.id;
    const userId = req.user.id;

    const [task] = await pool.query(
      "SELECT assigner_id FROM tasks WHERE id = ?",
      [taskId]
    );

    if (task.length === 0) {
      return res.status(404).json({ message: "Task not found" });
    }

    if (task[0].assigner_id !== userId) {
      return res
        .status(403)
        .json({ message: "User not authorized to edit this task" });
    }

    await pool.query(
      `UPDATE tasks SET 
              title = ?, 
              description = ?, 
              priority = ?, 
              due_date = ?, 
              assignee_id = ?
          WHERE id = ?`,
      [title, description, priority, dueDate, assignee_id, taskId]
    );

    res.json({ message: "Task updated successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};

/**
 * @desc    Delete a task
 * @route   DELETE /api/tasks/:id
 * @access  Private
 * @description Delete a task. Only the assigner of the task can delete it.
 */
const deleteTask = async (req, res) => {
  const taskId = req.params.id;
  const userId = req.user.id;

  try {
    // Check if the task exists and if the user is the assigner
    const [task] = await pool.query(
      "SELECT assigner_id FROM tasks WHERE id = ?",
      [taskId]
    );

    if (task.length === 0) {
      return res.status(404).json({ message: "Task not found" });
    }

    if (task[0].assigner_id !== userId) {
      return res
        .status(403)
        .json({ message: "User not authorized to delete this task" });
    }

    await pool.query("DELETE FROM tasks WHERE id = ?", [taskId]);
    res.json({ message: "Task deleted successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};

module.exports = {
  getTasks,
  createTask,
  updateTaskStatus,
  updateTask,
  deleteTask,
};
